#!/usr/bin/env python
# $Id: update_registry,v 1.4 2003/11/25 12:08:52 ods Exp $

import os, sys
from glob import glob

def warn(message):
    print >> sys.stderr, 'WARNING!', message

engines_by_type = {}
for filename in glob(os.path.join(os.path.dirname(sys.argv[0]), '*.py')):
    module_name = os.path.basename(filename)[:-3]
    if module_name[:1]=='_':
        continue
    try:
        module = __import__(module_name)
    except:
        warn('Cannot import module "%s".' % module_name)
        continue
    try:
        engine_class = getattr(module, 'Engine')
    except:
        warn('Module has no class "Engine".')
        continue
    try:
        engine = engine_class()
    except:
        warn('Error initializing engine from module "%s".' % module_name)
        continue
    try:
        engine_type = engine.type
    except:
        warn('Engine from module "%s" has no attribute "type".' % module_name)
        continue
    if engines_by_type.has_key(engine_type):
        warn('Duplicate entry for type "%s", ignoring.' % engine_type)
        continue
    print 'Registering module "%s" for type "%s".' % (module_name, engine_type)
    engines_by_type[engine_type] = module_name


fp = open(os.path.join(os.path.dirname(sys.argv[0]), '_registry.py.new'), 'w')
print >> fp, '# This file is generated by update_registry script. Do not edit!'
print >> fp, 'enginesByType = {'
for engine_type, module_name in engines_by_type.items():
    print >> fp, '    %-8r: %r,' % (engine_type, module_name)
print >> fp, '}'
os.rename(os.path.join(os.path.dirname(sys.argv[0]), '_registry.py.new'),
          os.path.join(os.path.dirname(sys.argv[0]), '_registry.py'))
